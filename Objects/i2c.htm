<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\i2c.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\i2c.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon May 25 16:53:14 2020
<BR><P>
<H3>Maximum Stack Usage =        360 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; ACCEL_getDefaultConfig &rArr; I2C_WriteReg &rArr; I2C_MasterTransferNonBlocking &rArr; I2C_InitTransferStateMachine &rArr; I2C_MasterTransferHandleIRQ &rArr; I2C_MasterTransferRunStateMachine &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[7a]">__user_initial_stackheap</a>
 <LI><a href="#[f]">SVC_Handler</a>
 <LI><a href="#[72]">process_terminated</a>
 <LI><a href="#[e4]">process_begin</a>
 <LI><a href="#[124]">process_blocked</a>
 <LI><a href="#[43]">PIT0_IRQHandler</a>
 <LI><a href="#[76]">SVC0_begin</a>
 <LI><a href="#[77]">SVC1_terminate</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[10]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DebugMon_Handler</a><BR>
 <LI><a href="#[11]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">PendSV_Handler</a><BR>
 <LI><a href="#[12]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">SysTick_Handler</a><BR>
 <LI><a href="#[3a]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">ADC0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3a]">ADC0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[5c]">ADC1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[5f]">CAN0_Bus_Off_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[60]">CAN0_Error_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[5e]">CAN0_ORed_Message_buffer_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[62]">CAN0_Rx_Warning_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[61]">CAN0_Tx_Warning_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[63]">CAN0_Wake_Up_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3b]">CMP0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3c]">CMP1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[59]">CMP2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[40]">CMT_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[4b]">DAC0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[5b]">DAC1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[13]">DMA0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[1d]">DMA10_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[1e]">DMA11_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[1f]">DMA12_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[20]">DMA13_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[21]">DMA14_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[22]">DMA15_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[14]">DMA1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[15]">DMA2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[16]">DMA3_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[17]">DMA4_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[18]">DMA5_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[19]">DMA6_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[1a]">DMA7_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[1b]">DMA8_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[1c]">DMA9_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[23]">DMA_Error_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[69]">DefaultISR</a> from startup_mk64f12.o(.text) referenced 154 times from startup_mk64f12.o(RESET)
 <LI><a href="#[65]">ENET_1588_Timer_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[68]">ENET_Error_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[67]">ENET_Receive_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[66]">ENET_Transmit_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[25]">FTFE_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3d]">FTM0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3e]">FTM1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3f]">FTM2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[5a]">FTM3_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[2b]">I2C0_DriverIRQHandler</a> from fsl_i2c.o(i.I2C0_DriverIRQHandler) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[2c]">I2C1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[5d]">I2C2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[70]">I2C_MasterTransferHandleIRQ</a> from fsl_i2c.o(i.I2C_MasterTransferHandleIRQ) referenced from fsl_i2c.o(i.I2C_MasterTransferCreateHandle)
 <LI><a href="#[30]">I2S0_Rx_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[2f]">I2S0_Tx_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[28]">LLW_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[4d]">LPTimer_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[27]">LVD_LVW_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[4c]">MCG_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[24]">MCM_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[47]">PDB0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[43]">PIT0_IRQHandler</a> from 3140.o(myProg) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[43]">PIT0_IRQHandler</a> from 3140.o(myProg) referenced from 3140.o(myProg)
 <LI><a href="#[44]">PIT1_IRQHandler</a> from process.o(i.PIT1_IRQHandler) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[45]">PIT2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[46]">PIT3_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[4e]">PORTA_IRQHandler</a> from lab3_t0.o(i.PORTA_IRQHandler) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[4f]">PORTB_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[50]">PORTC_IRQHandler</a> from lab3_t0.o(i.PORTC_IRQHandler) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[51]">PORTD_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[52]">PORTE_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[2a]">RNG_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[41]">RTC_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[42]">RTC_Seconds_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[26]">Read_Collision_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[4a]">Reserved71_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[78]">Reset_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[64]">SDHC_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[2d]">SPI0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[54]">SPI2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[76]">SVC0_begin</a> from 3140.o(myProg) referenced from 3140.o(myProg)
 <LI><a href="#[77]">SVC1_terminate</a> from 3140.o(myProg) referenced from 3140.o(myProg)
 <LI><a href="#[f]">SVC_Handler</a> from 3140.o(myProg) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[53]">SWI_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[6a]">SystemInit</a> from system_mk64f12.o(i.SystemInit) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[33]">UART0_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[31]">UART0_LON_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[32]">UART0_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[35]">UART1_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[34]">UART1_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[37]">UART2_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[36]">UART2_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[39]">UART3_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[38]">UART3_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[56]">UART4_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[55]">UART4_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[58]">UART5_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[57]">UART5_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[48]">USB0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[49]">USBDCD_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[29]">Watchdog_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[79]">__main</a> from __main.o(!!!main) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[6e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[6d]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[6f]">i2c_master_callback</a> from 3140_i2c.o(i.i2c_master_callback) referenced from 3140_i2c.o(i.I2C_Init)
 <LI><a href="#[71]">init</a> from lab3_t0.o(i.init) referenced from lab3_t0.o(i.main)
 <LI><a href="#[6b]">init_data_bss</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[73]">p1</a> from lab3_t0.o(i.p1) referenced from lab3_t0.o(i.random_process)
 <LI><a href="#[74]">p2</a> from lab3_t0.o(i.p2) referenced from lab3_t0.o(i.random_process)
 <LI><a href="#[75]">p3</a> from lab3_t0.o(i.p3) referenced from lab3_t0.o(i.random_process)
 <LI><a href="#[72]">process_terminated</a> from 3140.o(myProg) referenced from 3140_concur.o(i.process_stack_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[79]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[7b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[7d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[f3]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f4]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[7e]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[f5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[7f]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[95]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[f6]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[86]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[f7]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[81]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[f8]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[100]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[101]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[102]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[103]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[104]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[105]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[106]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[107]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[108]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[109]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[8b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[10c]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[10d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[10e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[10f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[110]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[111]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[112]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[7c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[113]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[83]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[85]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[114]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[87]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ACCEL_getDefaultConfig &rArr; I2C_WriteReg &rArr; I2C_MasterTransferNonBlocking &rArr; I2C_InitTransferStateMachine &rArr; I2C_MasterTransferHandleIRQ &rArr; I2C_MasterTransferRunStateMachine &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[115]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a4]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[8a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[116]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[8c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[117]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[6b]"></a>init_data_bss</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))

<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN0_Bus_Off_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>CAN0_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CAN0_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CAN0_Rx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CAN0_Tx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CAN0_Wake_Up_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>ENET_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>ENET_Receive_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>ENET_Transmit_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>FTFE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FTM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2S0_Rx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2S0_Tx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>LLW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>LPTimer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>PIT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>PIT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>PORTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>PORTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>Reserved71_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SDHC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SWI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>UART0_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>UART0_LON_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>UART0_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>UART1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>UART1_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>UART2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>UART2_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART3_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART3_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART4_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>UART4_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>UART5_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART5_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USBDCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>Watchdog_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mk64f12.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8e]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_rt_create
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_create
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stack_init
</UL>

<P><STRONG><a name="[91]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stack_free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_select
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[92]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
</UL>

<P><STRONG><a name="[94]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[80]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferCreateHandle
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGetDefaultConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferNonBlocking
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferHandleIRQ
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetInstance
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferRunStateMachine
</UL>

<P><STRONG><a name="[118]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferCreateHandle
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteReg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadRegs
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCEL_ReadWhoAmI
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[11d]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[9b]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[82]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[9d]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[93]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[6d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[98]"></a>__assert_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, assert_puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __assert_puts &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[9f]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[8d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[11f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[120]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[9e]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[9c]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[121]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[89]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a1]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[a0]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[a2]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[a5]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[a6]"></a>ACCEL_ReadWhoAmI</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, 3140_accel.o(i.ACCEL_ReadWhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ACCEL_ReadWhoAmI &rArr; I2C_MasterTransferNonBlocking &rArr; I2C_InitTransferStateMachine &rArr; I2C_MasterTransferHandleIRQ &rArr; I2C_MasterTransferRunStateMachine &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferNonBlocking
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCEL_getDefaultConfig
</UL>

<P><STRONG><a name="[a9]"></a>ACCEL_getAccelDat</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, 3140_accel.o(i.ACCEL_getAccelDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ACCEL_getAccelDat &rArr; I2C_ReadRegs &rArr; I2C_MasterTransferNonBlocking &rArr; I2C_InitTransferStateMachine &rArr; I2C_MasterTransferHandleIRQ &rArr; I2C_MasterTransferRunStateMachine &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p3
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1
</UL>

<P><STRONG><a name="[ab]"></a>ACCEL_getDefaultConfig</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, 3140_accel.o(i.ACCEL_getDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ACCEL_getDefaultConfig &rArr; I2C_WriteReg &rArr; I2C_MasterTransferNonBlocking &rArr; I2C_InitTransferStateMachine &rArr; I2C_MasterTransferHandleIRQ &rArr; I2C_MasterTransferRunStateMachine &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteReg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCEL_ReadWhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>Butt_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, utils.o(i.Butt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Butt_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>GPIO_PinInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fsl_gpio.o(i.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = GPIO_PinInit &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReleaseBus
</UL>

<P><STRONG><a name="[2b]"></a>I2C0_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_i2c.o(i.I2C0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C0_DriverIRQHandler &rArr; I2C_TransferCommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferCommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>I2C_DisableInterrupts</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_i2c.o(i.I2C_DisableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferHandleIRQ
</UL>

<P><STRONG><a name="[c1]"></a>I2C_EnableInterrupts</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsl_i2c.o(i.I2C_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferNonBlocking
</UL>

<P><STRONG><a name="[b1]"></a>I2C_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_i2c.o(i.I2C_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = I2C_GetInstance &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferCreateHandle
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
</UL>

<P><STRONG><a name="[b2]"></a>I2C_Init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, 3140_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = I2C_Init &rArr; I2C_MasterTransferCreateHandle &rArr; I2C_GetInstance &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferCreateHandle
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>I2C_MasterGetDefaultConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_i2c.o(i.I2C_MasterGetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = I2C_MasterGetDefaultConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[bc]"></a>I2C_MasterGetStatusFlags</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_i2c.o(i.I2C_MasterGetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterStart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRepeatedStart
</UL>

<P><STRONG><a name="[b5]"></a>I2C_MasterInit</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, fsl_i2c.o(i.I2C_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = I2C_MasterInit &rArr; I2C_GetInstance &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterSetBaudRate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetInstance
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterClearStatusFlags
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[b8]"></a>I2C_MasterRepeatedStart</STRONG> (Thumb, 102 bytes, Stack size 28 bytes, fsl_i2c.o(i.I2C_MasterRepeatedStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_MasterRepeatedStart
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferRunStateMachine
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InitTransferStateMachine
</UL>

<P><STRONG><a name="[bb]"></a>I2C_MasterSetBaudRate</STRONG> (Thumb, 138 bytes, Stack size 36 bytes, fsl_i2c.o(i.I2C_MasterSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_MasterSetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
</UL>

<P><STRONG><a name="[b9]"></a>I2C_MasterStart</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, fsl_i2c.o(i.I2C_MasterStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_MasterStart
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InitTransferStateMachine
</UL>

<P><STRONG><a name="[bf]"></a>I2C_MasterStop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsl_i2c.o(i.I2C_MasterStop))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferHandleIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferRunStateMachine
</UL>

<P><STRONG><a name="[b3]"></a>I2C_MasterTransferCreateHandle</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, fsl_i2c.o(i.I2C_MasterTransferCreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = I2C_MasterTransferCreateHandle &rArr; I2C_GetInstance &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetInstance
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[70]"></a>I2C_MasterTransferHandleIRQ</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, fsl_i2c.o(i.I2C_MasterTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = I2C_MasterTransferHandleIRQ &rArr; I2C_MasterTransferRunStateMachine &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterStop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DisableInterrupts
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferRunStateMachine
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InitTransferStateMachine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_i2c.o(i.I2C_MasterTransferCreateHandle)
</UL>
<P><STRONG><a name="[a8]"></a>I2C_MasterTransferNonBlocking</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, fsl_i2c.o(i.I2C_MasterTransferNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = I2C_MasterTransferNonBlocking &rArr; I2C_InitTransferStateMachine &rArr; I2C_MasterTransferHandleIRQ &rArr; I2C_MasterTransferRunStateMachine &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EnableInterrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InitTransferStateMachine
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteReg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadRegs
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCEL_ReadWhoAmI
</UL>

<P><STRONG><a name="[aa]"></a>I2C_ReadRegs</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, 3140_i2c.o(i.I2C_ReadRegs))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = I2C_ReadRegs &rArr; I2C_MasterTransferNonBlocking &rArr; I2C_InitTransferStateMachine &rArr; I2C_MasterTransferHandleIRQ &rArr; I2C_MasterTransferRunStateMachine &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferNonBlocking
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCEL_getAccelDat
</UL>

<P><STRONG><a name="[c3]"></a>I2C_ReleaseBus</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, 3140_i2c.o(i.I2C_ReleaseBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = I2C_ReleaseBus &rArr; GPIO_PinInit &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_release_bus_delay
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>I2C_WriteReg</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, 3140_i2c.o(i.I2C_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = I2C_WriteReg &rArr; I2C_MasterTransferNonBlocking &rArr; I2C_InitTransferStateMachine &rArr; I2C_MasterTransferHandleIRQ &rArr; I2C_MasterTransferRunStateMachine &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferNonBlocking
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCEL_getDefaultConfig
</UL>

<P><STRONG><a name="[c7]"></a>LEDBlue_On</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, utils.o(i.LEDBlue_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDBlue_On
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1
</UL>

<P><STRONG><a name="[ce]"></a>LEDBlue_Toggle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, utils.o(i.LEDBlue_Toggle))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDWhite_Toggle
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_Toggle
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1
</UL>

<P><STRONG><a name="[ca]"></a>LEDCyan_On</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, utils.o(i.LEDCyan_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDCyan_On
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_process
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p3
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1
</UL>

<P><STRONG><a name="[d1]"></a>LEDGreen_Toggle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, utils.o(i.LEDGreen_Toggle))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_Toggle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDWhite_Toggle
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p3
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1
</UL>

<P><STRONG><a name="[cb]"></a>LEDPurple_On</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, utils.o(i.LEDPurple_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDPurple_On
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p3
</UL>

<P><STRONG><a name="[cc]"></a>LEDPurple_Toggle</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, utils.o(i.LEDPurple_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LEDPurple_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDRed_Toggle
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBlue_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p3
</UL>

<P><STRONG><a name="[cf]"></a>LEDRed_On</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, utils.o(i.LEDRed_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDRed_On
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p3
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1
</UL>

<P><STRONG><a name="[cd]"></a>LEDRed_Toggle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, utils.o(i.LEDRed_Toggle))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_Toggle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDWhite_Toggle
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_Toggle
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>LEDWhite_Toggle</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, utils.o(i.LEDWhite_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LEDWhite_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDRed_Toggle
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDGreen_Toggle
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBlue_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[d2]"></a>LEDYellow_On</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, utils.o(i.LEDYellow_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDYellow_On
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2
</UL>

<P><STRONG><a name="[d3]"></a>LEDYellow_Toggle</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, utils.o(i.LEDYellow_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LEDYellow_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDRed_Toggle
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDGreen_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2
</UL>

<P><STRONG><a name="[de]"></a>LED_Initialize</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, utils.o(i.LED_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>PIT1_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, process.o(i.PIT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getabstime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>PORTA_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lab3_t0.o(i.PORTA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>PORTC_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lab3_t0.o(i.PORTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SystemInit</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, system_mk64f12.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>checkunready</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, process.o(i.checkunready))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = checkunready &rArr; enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getabstime
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiter
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_rt_create
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_select
</UL>

<P><STRONG><a name="[dd]"></a>delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, utils.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p3
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[d6]"></a>dequeue</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, process.o(i.dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkunready
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_select
</UL>

<P><STRONG><a name="[d7]"></a>enqueue</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, process.o(i.enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getabstime
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkunready
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_rt_create
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_create
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_select
</UL>

<P><STRONG><a name="[d4]"></a>getabstime</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, process.o(i.getabstime))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkunready
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT1_IRQHandler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_process
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p3
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_select
</UL>

<P><STRONG><a name="[d8]"></a>gettime</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, lab3_t0.o(i.gettime))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = gettime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getabstime
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_process
</UL>

<P><STRONG><a name="[6f]"></a>i2c_master_callback</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, 3140_i2c.o(i.i2c_master_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_master_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 3140_i2c.o(i.I2C_Init)
</UL>
<P><STRONG><a name="[71]"></a>init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lab3_t0.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init &rArr; LEDWhite_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDWhite_Toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lab3_t0.o(i.main)
</UL>
<P><STRONG><a name="[88]"></a>main</STRONG> (Thumb, 332 bytes, Stack size 128 bytes, lab3_t0.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = main &rArr; ACCEL_getDefaultConfig &rArr; I2C_WriteReg &rArr; I2C_MasterTransferNonBlocking &rArr; I2C_InitTransferStateMachine &rArr; I2C_MasterTransferHandleIRQ &rArr; I2C_MasterTransferRunStateMachine &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shortdelay
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_create
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Initialize
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDRed_Toggle
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Butt_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reseta
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_process
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_begin
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReleaseBus
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCEL_getDefaultConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCEL_ReadWhoAmI
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[73]"></a>p1</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, lab3_t0.o(i.p1))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = p1 &rArr; ACCEL_getAccelDat &rArr; I2C_ReadRegs &rArr; I2C_MasterTransferNonBlocking &rArr; I2C_InitTransferStateMachine &rArr; I2C_MasterTransferHandleIRQ &rArr; I2C_MasterTransferRunStateMachine &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getabstime
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDRed_On
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDGreen_Toggle
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCyan_On
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBlue_Toggle
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBlue_On
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twist
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCEL_getAccelDat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lab3_t0.o(i.random_process)
</UL>
<P><STRONG><a name="[74]"></a>p2</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, lab3_t0.o(i.p2))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = p2 &rArr; ACCEL_getAccelDat &rArr; I2C_ReadRegs &rArr; I2C_MasterTransferNonBlocking &rArr; I2C_InitTransferStateMachine &rArr; I2C_MasterTransferHandleIRQ &rArr; I2C_MasterTransferRunStateMachine &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getabstime
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_Toggle
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_On
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDRed_On
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDGreen_Toggle
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCyan_On
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twist
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCEL_getAccelDat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lab3_t0.o(i.random_process)
</UL>
<P><STRONG><a name="[75]"></a>p3</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, lab3_t0.o(i.p3))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = p3 &rArr; ACCEL_getAccelDat &rArr; I2C_ReadRegs &rArr; I2C_MasterTransferNonBlocking &rArr; I2C_InitTransferStateMachine &rArr; I2C_MasterTransferHandleIRQ &rArr; I2C_MasterTransferRunStateMachine &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getabstime
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDRed_On
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_Toggle
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_On
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDGreen_Toggle
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCyan_On
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twist
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCEL_getAccelDat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lab3_t0.o(i.random_process)
</UL>
<P><STRONG><a name="[e0]"></a>process_create</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, process.o(i.process_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = process_create &rArr; process_stack_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stack_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>process_rt_create</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, process.o(i.process_rt_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = process_rt_create &rArr; process_stack_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkunready
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stack_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_process
</UL>

<P><STRONG><a name="[e9]"></a>process_select</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, process.o(i.process_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = process_select &rArr; waiter &rArr; checkunready &rArr; enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiter
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkunready
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getabstime
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stack_free
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT0_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>process_stack_free</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, 3140_concur.o(i.process_stack_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = process_stack_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_select
</UL>

<P><STRONG><a name="[e7]"></a>process_stack_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, 3140_concur.o(i.process_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = process_stack_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_rt_create
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_create
</UL>

<P><STRONG><a name="[e1]"></a>process_start</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, process.o(i.process_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = process_start &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_begin
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>random_process</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lab3_t0.o(i.random_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = random_process &rArr; gettime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_rt_create
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getabstime
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCyan_On
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>reseta</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lab3_t0.o(i.reseta))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>shortdelay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, utils.o(i.shortdelay))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>twist</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lab3_t0.o(i.twist))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p3
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1
</UL>

<P><STRONG><a name="[df]"></a>uart_init</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, 3140_serial.o(i.uart_init))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>uart_putChar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, 3140_serial.o(i.uart_putChar))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
</UL>

<P><STRONG><a name="[dc]"></a>uart_putString</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, 3140_serial.o(i.uart_putString))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uart_putString
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putChar
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p3
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p2
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
</UL>

<P><STRONG><a name="[eb]"></a>waiter</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, process.o(i.waiter))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = waiter &rArr; checkunready &rArr; enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkunready
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_select
</UL>

<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 3140.o(myProg))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>process_terminated</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 3140.o(myProg))
<BR>[Address Reference Count : 1]<UL><LI> 3140_concur.o(i.process_stack_init)
</UL>
<P><STRONG><a name="[e4]"></a>process_begin</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 3140.o(myProg))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>process_blocked</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 3140.o(myProg), UNUSED)

<P><STRONG><a name="[43]"></a>PIT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 3140.o(myProg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = PIT0_IRQHandler &rArr; process_select &rArr; waiter &rArr; checkunready &rArr; enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_select
</UL>
<BR>[Address Reference Count : 2]<UL><LI> 3140.o(myProg)
<LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
</UL>

<P><STRONG><a name="[ef]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
</UL>

<P><STRONG><a name="[125]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[da]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
</UL>

<P><STRONG><a name="[f1]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[f0]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
</UL>

<P><STRONG><a name="[f2]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c5]"></a>GPIO_PinWrite</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, 3140_i2c.o(i.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReleaseBus
</UL>

<P><STRONG><a name="[c4]"></a>PORT_SetPinConfig</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, 3140_i2c.o(i.PORT_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = PORT_SetPinConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReleaseBus
</UL>

<P><STRONG><a name="[c6]"></a>i2c_release_bus_delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, 3140_i2c.o(i.i2c_release_bus_delay))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReleaseBus
</UL>

<P><STRONG><a name="[76]"></a>SVC0_begin</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 3140.o(myProg))
<BR>[Address Reference Count : 1]<UL><LI> 3140.o(myProg)
</UL>
<P><STRONG><a name="[77]"></a>SVC1_terminate</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 3140.o(myProg))
<BR>[Address Reference Count : 1]<UL><LI> 3140.o(myProg)
</UL>
<P><STRONG><a name="[ae]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, utils.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Butt_Init
</UL>

<P><STRONG><a name="[c8]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utils.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_On
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDRed_On
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_On
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCyan_On
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBlue_On
</UL>

<P><STRONG><a name="[c9]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utils.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_On
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDRed_On
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_On
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCyan_On
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBlue_On
</UL>

<P><STRONG><a name="[ec]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, process.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
</UL>

<P><STRONG><a name="[ed]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, process.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
</UL>

<P><STRONG><a name="[ba]"></a>CLOCK_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_i2c.o(i.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
</UL>

<P><STRONG><a name="[bd]"></a>EnableIRQ</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fsl_i2c.o(i.EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferCreateHandle
</UL>

<P><STRONG><a name="[c2]"></a>I2C_CheckAndClearError</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_i2c.o(i.I2C_CheckAndClearError))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferRunStateMachine
</UL>

<P><STRONG><a name="[b6]"></a>I2C_InitTransferStateMachine</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, fsl_i2c.o(i.I2C_InitTransferStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = I2C_InitTransferStateMachine &rArr; I2C_MasterTransferHandleIRQ &rArr; I2C_MasterTransferRunStateMachine &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferHandleIRQ
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterStart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRepeatedStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferNonBlocking
</UL>

<P><STRONG><a name="[b7]"></a>I2C_MasterClearStatusFlags</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_i2c.o(i.I2C_MasterClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InitTransferStateMachine
</UL>

<P><STRONG><a name="[be]"></a>I2C_MasterTransferRunStateMachine</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, fsl_i2c.o(i.I2C_MasterTransferRunStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = I2C_MasterTransferRunStateMachine &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterStop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRepeatedStart
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckAndClearError
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferHandleIRQ
</UL>

<P><STRONG><a name="[b0]"></a>I2C_TransferCommonIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, fsl_i2c.o(i.I2C_TransferCommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_TransferCommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_DriverIRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
